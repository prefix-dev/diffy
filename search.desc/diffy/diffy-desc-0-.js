searchState.loadedDescShard("diffy", 0, "Tools for finding and manipulating differences between …\nConfiguration for patch application\nAn error returned when <code>apply</code>ing a <code>Patch</code> fails\nDo not trust the line counts in the hunk headers and check …\nStyle used when rendering a conflict\nA line providing context in the diff which is present in …\nCarriage Return + Line Feed (CRLF) - Used on Windows (<code>\\r\\n</code>…\nA line deleted from the old file\nRepresentation of all the differences between two files\nRenders conflicting lines from both files including lines …\nA collection of options for modifying the way a diff is …\nReplace matched line ending with line ending from original …\nEnforce specific line ending.\nReplace matched line ending with line ending from patch …\nConfiguration for fuzzy matching behavior\nRepresents a group of differing lines between two files\nThe range of lines in a file for a particular <code>Hunk</code>.\nTrust the line counts in the hunk headers.\nA line inserted to the new file\nLine Feed (LF) - Common on Unix, Linux, and macOS (<code>\\n</code>).\nA line in either the old file, new file, or both.\nConfiguration of line end handling\nRenders conflicting lines from both files, separated by …\nA collection of options for modifying the way a merge is …\nAn error returned when parsing a <code>Patch</code> using …\nStruct used to adjust the formatting of a <code>Patch</code>\nDo not trust the line counts in the hunk headers, but infer\nApply a <code>Diff</code> to a base image with default fuzzy matching\nApply a non-utf8 <code>Diff</code> to a base image with default fuzzy …\nApply a non-utf8 <code>Diff</code> to a base image with custom fuzzy …\nApply a <code>Diff</code> to a base image with custom fuzzy matching …\nChoose line ending based on the scores.\nCreate a patch between two texts.\nProduce a Patch between two texts based on the configured …\nCreate a patch between two potentially non-utf8 texts\nCreate a patch between two potentially non-utf8 texts\nReturns the ending line number of the range (exclusive)\nReturns a <code>Display</code> impl which can be used to print a Patch\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nReturns the argument unchanged.\nParse a <code>Patch</code> from bytes\nParse a <code>Patch</code> from a string\nReturns the function context (if any) for the hunk\nConfiguration of fuzzy matching\nChoose what to do with hunk ranges.\nReturns the hunks in the patch\nWhether to perform case-insensitive matching\nWhether to allow whitespace-only differences in context …\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nReturns <code>true</code> if the range is empty (has a length of <code>0</code>)\nReturns the number of lines in the range\nConfiguration of line end handling\nReturns the lines in the hunk\nMaximum number of context lines that can be ignored (fuzz …\nMerge two files given a common ancestor.\nMerge two files, given a common ancestor, based on the …\nPerform a 3-way merge between potentially non-utf8 texts\nPerform a 3-way merge between potentially non-utf8 texts\nSets whether to format a patch with a “No newline at end …\nReturn the name of the new file\nReturns most common line ending.\nConstruct a new <code>DiffOptions</code> with default settings\nConstructs a new <code>MergeOptions</code> with default settings\nConstruct a new formatter\nReturns the corresponding range for the new file in the …\nReturns the corresponding range for the old file in the …\nReturn the name of the old file\nReturns the range as a <code>ops::Range</code>\nCreates a reverse patch for the hunk.  This is equivalent …\nSet the length of the conflict markers used when …\nSet the conflict style used when displaying a merge …\nSet the number of context lines that should be used when …\nSet the filename to be used in the patch for the modified …\nSet the filename to be used in the patch for the original …\nReturns the starting line number of the range (inclusive)\nStrip only line ending from <code>line</code>. Returns pair of stripped …\nSets whether to suppress printing of a space before empty …\nConvert a <code>Patch</code> into bytes\nEnable formatting a patch with color")